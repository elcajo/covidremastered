{"version":3,"sources":["components/Cards/Cards.module.css","components/Cards/Cards.jsx","api/index.js","components/Charts/Charts.jsx","components/CountryPicker/CountryPicker.jsx","images/corona.png","App.js","index.js","components/CountryPicker/CountryPicker.module.css","App.module.css","components/Charts/Charts.module.css"],"names":["module","exports","Cards","data","confirmed","recovered","deaths","lastUpdate","className","cardStyles","container","Grid","spacing","justify","item","component","Card","xs","md","cn","card","infected","CardContent","Typography","color","gutterBottom","Date","toDateString","variant","start","end","value","url","fetchData","country","a","changeableUrl","axios","get","console","log","fetchDailyData","modifiedData","map","dailyData","total","date","reportDate","fetchCountries","countries","name","Charts","useState","setDailyData","useEffect","fetchAPI","lineChart","length","labels","toLocaleDateString","datasets","label","borderColor","fill","backgroundColor","barChart","options","legend","display","title","text","chartStyles","CountryPicker","handleCountryChange","fetchedCountries","setFetchedCountries","FormControl","cpStyles","formControl","NativeSelect","defaultValue","onChange","e","target","i","App","state","fetchedData","setState","this","appstyle","src","corona","alt","image","React","Component","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9ccb7e54.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Cards_container__3bjn6\",\"card\":\"Cards_card__eGUfZ\",\"infected\":\"Cards_infected__-adYp\",\"recovered\":\"Cards_recovered__1aizD\",\"deaths\":\"Cards_deaths__Qdjzq\"};","import React from 'react';\nimport { Card, CardContent, Typography, Grid } from '@material-ui/core';\nimport CountUp from 'react-countup';\nimport cn from 'classnames';\n\nimport cardStyles from './Cards.module.css';\n\nconst Cards = ( {data: {confirmed, recovered, deaths, lastUpdate}} ) => {\n    \n    if(!confirmed){\n        return 'Loading ...';\n    }\n    \n    return(\n        <div className={ cardStyles.container }>\n            <Grid container spacing={3} justify=\"center\" >\n                <Grid item component={Card} xs={12} md={3} className={cn(cardStyles.card, cardStyles.infected)} >\n                    <CardContent>\n                        <Typography color=\"textPrimary\">Infected</Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>as of {new Date(lastUpdate).toDateString()}:</Typography>\n                        <Typography variant=\"h5\" >\n                            <CountUp \n                                start={0}\n                                end={confirmed.value}\n                                />\n                        </Typography>\n                        <Typography variant=\"body2\" >Number of active cases of Covid 19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cn(cardStyles.card, cardStyles.recovered)} >\n                    <CardContent>\n                        <Typography color=\"textPrimary\">Recoveries</Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>as of {new Date(lastUpdate).toDateString()}:</Typography>\n                        <Typography variant=\"h5\" >\n                        <CountUp \n                                start={0}\n                                end={recovered.value}\n                                />\n                        </Typography>\n                        <Typography variant=\"body2\" >Number of recoveries cases of Covid 19</Typography>\n                    </CardContent>\n                </Grid>\n                <Grid item component={Card} xs={12} md={3} className={cn(cardStyles.card, cardStyles.deaths)} >\n                    <CardContent>\n                        <Typography color=\"textPrimary\">Deaths</Typography>\n                        <Typography color=\"textSecondary\" gutterBottom>as of {new Date(lastUpdate).toDateString()}:</Typography>\n                        <Typography variant=\"h5\" >\n                        <CountUp \n                                start={0}\n                                end={deaths.value}\n                                />\n                        </Typography>\n                        <Typography variant=\"body2\" >Number of deaths cases of Covid 19</Typography>\n                    </CardContent>\n                </Grid>\n            </Grid>\n        </div>\n)\n}\n\nexport default Cards;","import axios from 'axios';\n\nconst url = 'https://covid19.mathdro.id/api';\n\nexport const fetchData = async (country) => {\n  let changeableUrl = url;\n\n  if(country){\n    changeableUrl = `${url}/countries/${country}`;\n  }\n\n    try {\n        const { data: { confirmed, recovered, deaths, lastUpdate } } = await axios.get(changeableUrl);\n      return { confirmed, recovered, deaths, lastUpdate }; \n    } catch (error) {\n      console.log(error);\n    }\n}\n\nexport const fetchDailyData = async() => {\n  try{\n    const {data} = await axios.get(`${url}/daily`);\n    \n    \n    const modifiedData = data.map((dailyData) => ({\n      confirmed: dailyData.confirmed.total,\n      deaths: dailyData.deaths.total,\n      date: dailyData.reportDate,\n    }) )\n    return modifiedData;\n  } catch (error) {\n  }\n}\n\nexport const fetchCountries = async () => {\n  try {\n    const { data: { countries } } = await axios.get(`${url}/countries`);\n    \n    return countries.map((country) => country.name );\n  } catch (error){\n    console.log(error);\n  }\n}","import React, { useState, useEffect } from 'react';\nimport { fetchDailyData } from '../../api'; \nimport { Line, Bar } from 'react-chartjs-2';\n\nimport chartStyles from './Charts.module.css';\n\nconst Charts = ({data: {confirmed, deaths, recovered}, country}) => {\n    const [dailyData, setDailyData] = useState([]);\n    \n    useEffect(() => {\n        const fetchAPI  = async () => {\n            setDailyData(await fetchDailyData());\n        }\n            fetchAPI();\n        }, []); \n\n    const lineChart = (\n        dailyData.length\n        ? (\n            <Line \n                data={{\n                    labels: dailyData.map(({ date }) => new Date(date).toLocaleDateString() ),\n                    datasets: [{\n                        data: dailyData.map(({confirmed}) => confirmed),\n                        label: 'Infected',\n                        borderColor: '#3333ff',\n                        fill: true,\n                    }, {\n                        data: dailyData.map(({deaths}) => deaths),\n                        label: 'Deaths',\n                        borderColor: 'red',\n                        backgroundColor: 'rgba(255, 0, 0, .35)',\n                        fill: true,\n                    }],\n                }}\n            />) : null\n    );\n\n    const barChart = (\n        confirmed\n        ? (\n            <Bar \n                data = {{\n                    labels: ['Infected', 'Recovered', 'Deaths'],\n                    datasets: [{\n                        label: 'People',\n                        backgroundColor: [\n                            'rgba(245,255,45,0.8)',\n                            'rgba(65,255,76,0.8)',\n                            'rgba(255,50,50,0.8)'\n                        ],\n                        data: [confirmed.value, recovered.value, deaths.value]\n                    }]\n                }}\n                options ={{\n                    legend: {display: false},\n                    title: {display:true, text:`Current state in ${country}`}\n                }}\n            />\n        ) : null\n    );\n\n    return(\n        <div className={chartStyles.container} >\n            {country ? barChart : lineChart}\n        </div>\n    )\n}\n\nexport default Charts;","import React, { useState, useEffect } from 'react';\nimport { NativeSelect, FormControl } from '@material-ui/core';\nimport cn from 'classnames';\n\nimport cpStyles from './CountryPicker.module.css';\n\nimport { fetchCountries } from '../../api';\n\nconst CountryPicker = ({ handleCountryChange }) => {\n    const [ fetchedCountries, setFetchedCountries ] = useState([]);\n\n    useEffect((  ) => {\n        const fetchAPI = async () => {\n            setFetchedCountries(await fetchCountries() );\n        }\n        fetchAPI();\n    }, [setFetchedCountries])\n\n    console.log(fetchedCountries);\n\n    return(\n        <div>\n            <FormControl className={cn(cpStyles.container, cpStyles.formControl)} >\n                <NativeSelect defaultValue=\"\" onChange={(e)=> handleCountryChange(e.target.value) }>\n                    <option value=\"\">Global</option>\n                    { fetchedCountries.map((country, i) => <option key={i} value={country}> {country} </option> )}\n\n                </NativeSelect>\n            </FormControl>\n        </div>\n    )\n}\n\nexport default CountryPicker;","export default __webpack_public_path__ + \"static/media/corona.d6493e61.png\";","import React from 'react';\n\nimport { Cards, Charts, CountryPicker } from './components';\n\nimport appstyle from './App.module.css';\n\nimport { fetchData } from './api';\n\nimport corona from './images/corona.png'\n\nclass App extends React.Component{\n    state = {\n        data: {  },\n        country: '',\n    }\n\n\n    async componentDidMount() {\n        const fetchedData = await fetchData();\n        this.setState( { data: fetchedData } )\n    }\n\n    handleCountryChange = async(country) => {\n        const fetchedData = await fetchData(country);\n\n        this.setState( { data: fetchedData, country: country } )\n    }\n\n    render(){\n        const { data, country } = this.state;\n\n        return(\n            <div className={ appstyle.container }>\n                <img src={corona} alt=\"Corona Logo\" className={appstyle.image} />\n                <Cards data={data} />\n                <CountryPicker handleCountryChange={this.handleCountryChange} />\n                <Charts data={data} country={country}/>\n            </div>\n        )\n    }\n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render( <App />, document.getElementById('root') );","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CountryPicker_container__2vyxG\",\"formControl\":\"CountryPicker_formControl__2p8f9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"image\":\"App_image__3byI1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Charts_container__1mZfu\"};"],"sourceRoot":""}